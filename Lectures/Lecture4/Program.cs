//Урок 4. Двумерные массивы и рекурсия 

/* 
Двумерные массивы задаются по аналогии с одномерными массивами:

string[,] table = new string[2, 3]; //в конце - ;

1.Тип данных
2.В квадратных скобках обязательно ставим запятую - это указывает на то, что у нас будет две размерности (строки и столбцы)
3.Наименование массива (table - таблица)
4.Знак присваивания (=)
5. new string
6. В квадратных скобках указываем, сколько строк и столбцов нам нужно через запятую
Так мы создали таблицу строк
                    
int[,] matrix = new int[5, 8]; - А это уже талица чисел, в математике ее называют - мартица

Первым числом в скобках указываются строки, а вторым - столбцы
*/
//String.Empty - это константа для пустых строк
/*
string[,] table = new string[2, 5]; 

table[1, 2] = "слово";  // Для того, чтобы обратиться к нужному нам элементу, мы указываем наименование массива 
                       //и в квадратных скобках - сначала индекс строки и потом индекс столбца 
                       // далее используем эту ячейку как обычную переменную, в которую можно что-то положить; кладем "слово"
*/
//Индексы для строк и столбцов начинаются с нуля: т.е. если рассматривать весь наш массив, то самый первый элемент будет [0,0]
//последний элементе в ячейке [1,4]

        //столбики 
// с  //table[0, 0]  table[0, 1] table[0, 2] table[0, 3] table[0, 4]
// т  //table[1, 0]  table[1, 1] table[1, 2] table[1, 3] table[1, 4]
// р   
// о
// к
// и

//Чтобы распечатать данный массив будем использовать цикл for
/*
string[,] table = new string[2, 5]; 

table[1, 2] = "слово";
for(int rows = 0; rows < 2; rows++)
{
    for(int columns = 0; columns < 5; columns++)
    {
        Console.WriteLine($"-{table[rows, columns]}-");// минусы по бокам нужны, чтобы заполнить строки
    }
}
*/ 

//Создадим матрицу из чисел:
/*
void PrintArray(int[,] matr) //для текущего кода с циклом делаем обрамление методом void
{
       for(int rows = 0; rows < 3; rows++) // for(int i = 0; i < matrix.GetLength(0); columns++)
       {
         for(int columns = 0; columns < 4; columns++) //или for(int j = 0; j < matrix.GetLength(1); columns++)
        {
        Console.Write($"{matr[rows, columns]}");
        }
    Console.WriteLine();
        }
}
void FillArray(int[,] matr) 
{
    for(int i = 0; i < matr.GetLength(0); i++) 
    {
      
        for(int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i, j] = new Random().Next(1, 10); //возьмем числа в интервале от 1 до 10

        }
         
    }
        
}

int[,] matrix = new int[3, 4];//инициализацию массива перенесли из начала сюда
PrintArray(matrix); //сначала инициализируем нолями и единицами
FillArray(matrix);//потом заполняем случайными цифрами как в задании
Console.WriteLine(); //пустая строка между массивом из нулей и массивом из ранодомных чисел
PrintArray(matrix);//потом выводим на экран готовым двумерный массив из случайных чисел
*/

//Напишите программу, которая будет закрашивать область внутри конткура на картинке(Закрашенные пиксели - это 1, незакрашенные - 0)
/*
int[,] pic = new int[,] //- оставляем квадратные скобки без аргументов(рядов и столбцов, т.к. они будто фиксированные)
void PrintImage(int[,] image) 
{   
    for(int i = 0; i < image.GetLength(0); i++) 
    {
      
        for(int j = 0; j < image.GetLength(1); j++)
        {
            //Console.Write($"{image[i, j]}");
            if(image[i, j == 0]) Console.Write($""); //если i и j равны нолю, то будем печатать пробел
            else Console.Write($"+"); //а если i и j не равны нолю, то печатаем плюсик

        }
       Console.WriteLine(); //пустая строка
    }
        
}
void FillImage (int row, int col) //метод, чтобы закрасить картинку, где в качестве аргументов - позиция строки и пикселя, с которого будем начинать закраску.
{
   if(pic[row, col] == 0) //т.е если пиксель незакрашен
   {
       pic[row, col] = 1; //то мы должны его закрасить единичкой 
       FillImage(row - 1, col); //поднимаемся на строку выше и, если не закрашено, красим
       FillImage(row, col - 1); //идем в той-же строке, но влево и красим, если не закрашено
       FillImage(row + 1, col); //идем в той-же строке, но вниз, и закрашиваем, если не закрашено
       FillImage(row, col + 1); //идем в той-же строке, но вправо, и закрашиваем, если не закрашено

   }
}


PrintImage(pic);
FillImage(13, 13);//в качестве координат случайно точки берем (13;13)
PrintImage(pic);
*/

//Рекурсия - это функция, которая вызывает сама себя
/*
int Factorial(int n)
{
    //1! = 1
    //0! = 1
    if(n == 1) return 1; //если число равно 1, то факториал 1
    else return n * Factorial(n-1); //если число равно чему-то другому, а не 1, то число умножаем на факториал прелпоследнего числа
}
    for(int i = 0; i < 10; i++) 
    {
       Console.WriteLine($"{i}! = Factorial(i)");
    }

*/
//Ряд Фибонначи

//f(1) = 1
//f(2) = 1
//f(n) = f(n -1) + f(n-2)
/*
int Fibonacci(int n)
{
   if(n == 1 || n == 2) return 1;
   else return Fibonacci(n - 1) + Fibonacci(n - 2);
}
for(int i = 1; i < 10; i++) //покажем первые 10 чисел фибоначи
    {
       Console.WriteLine(Fibonacci(i));
    }
*/